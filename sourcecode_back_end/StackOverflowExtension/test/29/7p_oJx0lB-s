- [Voiceover] In the last movie, we saw how to add the offset from UTC to the time zones option list. In this movie, we'll improve the formatting of those offset values. So what we've already done is, we used the DateTime object to get the offset and divided it by 3600, and then we displayed it to the user and it looks something like this. What we don't like is the fact that this says minus four and this says one and two and so on. It doesn't really give us a time. It doesn't feel like it's a time. In fact, here, it's not even really clear what this is.

UTC/GMT one. What does that mean? That's not the way that we usually see these represented. So we need to do some formatting here. And there are a couple of ways that we could do that. The first is that we could add a new function called function format_hours_minutes. We'll pass in a float to that. And then in there we could actually just do the formatting that we need. We can take that float apart. We can use floor to find out what the integer portion is.

That'll give us the hours. And for the minutes, well then we could just take the original float and we could subtract out the number of hours. That will give us the decimal portion. We can multiply that by 60 to get the number of minutes. And then once we have that, then we could output a string. You could do something very simple, like return and then inside here you could put dollar sign hours, then colon, and then dollar sign minutes. The problem with this is that if minutes is a number like eight, it's not going to have a zero in front of it.

So a better tool for formatting numbers like that is sprintf. sprintf gives you the ability to control the formatting through a series of codes. You have to look these up to know what they are if you're not familiar with it, but percent and then plus zero two d colon percent zero two d followed by hours and minutes. What that's going to do is take hours and drop it into this first spot here. It's going to make sure it has two digits.

Oops, I forgot a d. Let me add that d in there. It's going to make sure that it has two digits and it's going to put a plus or minus sign in front of it, which is desirable for the time zone. And then the second number will also be d for digits, and it will have two digits as well. So that'll make sure that hours and minutes gets formatted correctly. And then we could take format_hours_and_minutes and drop down here. Let's do offset is going to be equal to format_hours_and_minutes. And I'm just going to take the same code.

Gonna paste it in there. I'm going to comment out that old one. Alright, so now we'll get the new version. Let's go back. Let's take a look at Firefox. Let's reload our page. And there we go. That's more what we would expect, right? Plus one colon zero zero, plus zero colon zero zero, and so on. And if we scroll all the way down, let's go to Asia, to, I believe it was Kathmandu we were looking at. Here we are, Kathmandu. Five colon four five. Here's Kolkata, five colon three zero. That makes a lot more sense.

It's much better than those floating point numbers they were working with. So that would work. That is sort of using PHP as a function, using some of the things we know about PHP, in order to get that well-formatted. But, I want to show you another way to do it as well. Let's come down here. I'm going to comment out that offset, and instead I'm going to put another way we could do it. offset equals. Now we have that DateTime object, right? That DateTime object contains knowledge and one of the parts of the knowledge it contains is how to format its offset.

Right, it's built in. So we can just tell it, format, and it will format the date and time and return whatever we want from that format. We can have it return the hour, the minute, the second. But if we use capital P, it will return a well-formatted offset for us. Just like that. We don't have to do any of the math here. We don't have to divide by 3600. We don't have to put together these strings, figure out the hours and the minutes and format it. We can just tell PHP, hey PHP, use your knowledge about how offsets are formatted and give me this current offset in a well-formatted way.

It's really nice and simple. So let's save that. Let's go back. And let's go to Firefox. Let's reload our page. And look at that. It actually gave us the leading zero which I was hoping for there. So we get plus zero one colon zero zero. Plus zero two colon zero zero and so on, all the way down the line. If we scroll down here till we get to Asia. There we are, Kathmandu, oh five colon 45. Kolkata, oh five colon 30. Exactly what we would want. All of that formatting information is already part of the knowledge of our DateTime object.