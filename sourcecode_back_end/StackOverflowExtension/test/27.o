<p><code>in</code> is the intended way to test for the existence of a key in a <code>dict</code>.</p>

<pre><code>d = dict()

for i in xrange(100):
    key = i % 10
    if key in d:
        d[key] += 1
    else:
        d[key] = 1
</code></pre>

<p>If you wanted a default, you can always use <code>dict.get()</code>:</p>

<pre><code>d = dict()

for i in xrange(100):
    key = i % 10
    d[key] = d.get(key, 0) + 1
</code></pre>

<p>... and if you wanted to always ensure a default value for any key you can use <code>defaultdict</code> from the <code>collections</code> module, like so:</p>

<pre><code>from collections import defaultdict

d = defaultdict(lambda: 0)

for i in xrange(100):
    d[i % 10] += 1
</code></pre>

<p>... but in general, the <code>in</code> keyword is the best way to do it.</p>
