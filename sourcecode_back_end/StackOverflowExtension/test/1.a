Classes as objects
==================

Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.

In most languages, classes are just pieces of code that describe how to produce an object. That&#39;s kinda true in Python too:

    &gt;&gt;&gt; class ObjectCreator(object):
    ...       pass
    ... 
    
    &gt;&gt;&gt; my_object = ObjectCreator()
    &gt;&gt;&gt; print(my_object)
    &lt;__main__.ObjectCreator object at 0x8974f2c&gt;

But classes are more than that in Python. Classes are objects too.

Yes, objects. 

As soon as you use the keyword `class`, Python executes it and creates
an OBJECT. The instruction

    &gt;&gt;&gt; class ObjectCreator(object):
    ...       pass
    ... 

creates in memory an object with the name &quot;ObjectCreator&quot;. 

**This object (the class) is itself capable of creating objects (the instances), 
and this is why it&#39;s a class**. 

But still, it&#39;s an object, and therefore:

- you can assign it to a variable
- you can copy it
- you can add attributes to it
- you can pass it as a function parameter

e.g.:

    &gt;&gt;&gt; print(ObjectCreator) # you can print a class because it&#39;s an object
    &lt;class &#39;__main__.ObjectCreator&#39;&gt;
    &gt;&gt;&gt; def echo(o):
    ...       print(o)
    ... 
    &gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter
    &lt;class &#39;__main__.ObjectCreator&#39;&gt;
    &gt;&gt;&gt; print(hasattr(ObjectCreator, &#39;new_attribute&#39;))
    False
    &gt;&gt;&gt; ObjectCreator.new_attribute = &#39;foo&#39; # you can add attributes to a class
    &gt;&gt;&gt; print(hasattr(ObjectCreator, &#39;new_attribute&#39;))
    True
    &gt;&gt;&gt; print(ObjectCreator.new_attribute)
    foo
    &gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable
    &gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)
    foo
    &gt;&gt;&gt; print(ObjectCreatorMirror())
    &lt;__main__.ObjectCreator object at 0x8997b4c&gt;


Creating classes dynamically
============================

Since classes are objects, you can create them on the fly, like any object.

First, you can create a class in a function using `class`:

    &gt;&gt;&gt; def choose_class(name):
    ...     if name == &#39;foo&#39;:
    ...         class Foo(object):
    ...             pass
    ...         return Foo # return the class, not an instance
    ...     else:
    ...         class Bar(object):
    ...             pass
    ...         return Bar
    ...     
    &gt;&gt;&gt; MyClass = choose_class(&#39;foo&#39;) 
    &gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance
    &lt;class &#39;__main__.Foo&#39;&gt;
    &gt;&gt;&gt; print(MyClass()) # you can create an object from this class
    &lt;__main__.Foo object at 0x89c6d4c&gt;


But it&#39;s not so dynamic, since you still have to write the whole class yourself.

Since classes are objects, they must be generated by something.

When you use the `class` keyword, Python creates this object automatically. But as
with most things in Python, it gives you a way to do it manually.

Remember the function `type`? The good old function that lets you know what 
type an object is:

    &gt;&gt;&gt; print(type(1))
    &lt;type &#39;int&#39;&gt;
    &gt;&gt;&gt; print(type(&quot;1&quot;))
    &lt;type &#39;str&#39;&gt;
    &gt;&gt;&gt; print(type(ObjectCreator))
    &lt;type &#39;type&#39;&gt;
    &gt;&gt;&gt; print(type(ObjectCreator()))
    &lt;class &#39;__main__.ObjectCreator&#39;&gt;

Well, [`type`][1] has a completely different ability, it can also create classes on the fly. `type` can take the description of a class as parameters, 
and return a class.

(I  know, it&#39;s silly that the same function can have two completely different uses according to the parameters you pass to it. It&#39;s an issue due to backwards 
compatibility in Python)

`type` works this way:

    type(name of the class, 
         tuple of the parent class (for inheritance, can be empty), 
         dictionary containing attributes names and values)

e.g.:

    &gt;&gt;&gt; class MyShinyClass(object):
    ...       pass

can be created manually this way:

    &gt;&gt;&gt; MyShinyClass = type(&#39;MyShinyClass&#39;, (), {}) # returns a class object
    &gt;&gt;&gt; print(MyShinyClass)
    &lt;class &#39;__main__.MyShinyClass&#39;&gt;
    &gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class
    &lt;__main__.MyShinyClass object at 0x8997cec&gt;

You&#39;ll notice that we use &quot;MyShinyClass&quot; as the name of the class
and as the variable to hold the class reference. They can be different,
but there is no reason to complicate things.

`type` accepts a dictionary to define the attributes of the class. So:

    &gt;&gt;&gt; class Foo(object):
    ...       bar = True

Can be translated to:

    &gt;&gt;&gt; Foo = type(&#39;Foo&#39;, (), {&#39;bar&#39;:True})

And used as a normal class:

    &gt;&gt;&gt; print(Foo)
    &lt;class &#39;__main__.Foo&#39;&gt;
    &gt;&gt;&gt; print(Foo.bar)
    True
    &gt;&gt;&gt; f = Foo()
    &gt;&gt;&gt; print(f)
    &lt;__main__.Foo object at 0x8a9b84c&gt;
    &gt;&gt;&gt; print(f.bar)
    True

And of course, you can inherit from it, so:

    &gt;&gt;&gt;   class FooChild(Foo):
    ...         pass

would be:

    &gt;&gt;&gt; FooChild = type(&#39;FooChild&#39;, (Foo,), {})
    &gt;&gt;&gt; print(FooChild)
    &lt;class &#39;__main__.FooChild&#39;&gt;
    &gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo
    True

Eventually you&#39;ll want to add methods to your class. Just define a function
with the proper signature and assign it as an attribute.

    &gt;&gt;&gt; def echo_bar(self):
    ...       print(self.bar)
    ... 
    &gt;&gt;&gt; FooChild = type(&#39;FooChild&#39;, (Foo,), {&#39;echo_bar&#39;: echo_bar})
    &gt;&gt;&gt; hasattr(Foo, &#39;echo_bar&#39;)
    False
    &gt;&gt;&gt; hasattr(FooChild, &#39;echo_bar&#39;)
    True
    &gt;&gt;&gt; my_foo = FooChild()
    &gt;&gt;&gt; my_foo.echo_bar()
    True

And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.

    &gt;&gt;&gt; def echo_bar_more(self):
    ...       print(&#39;yet another method&#39;)
    ... 
    &gt;&gt;&gt; FooChild.echo_bar_more = echo_bar_more
    &gt;&gt;&gt; hasattr(FooChild, &#39;echo_bar_more&#39;)
    True

You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.

This is what Python does when you use the keyword `class`, and it does so by using a metaclass.

What are metaclasses (finally)
==============================

Metaclasses are the &#39;stuff&#39; that creates classes.

You define classes in order to create objects, right?

But we learned that Python classes are objects.

Well, metaclasses are what create these objects. They are the classes&#39; classes,
you can picture them this way:

    MyClass = MetaClass()
    MyObject = MyClass()

You&#39;ve seen that `type` lets you do something like this:

    MyClass = type(&#39;MyClass&#39;, (), {})

It&#39;s because the function `type` is in fact a metaclass. `type` is the 
metaclass Python uses to create all classes behind the scenes.

Now you wonder why the heck is it written in lowercase, and not `Type`?

Well, I guess it&#39;s a matter of consistency with `str`, the class that creates
strings objects, and `int` the class that creates integer objects. `type` is
just the class that creates class objects.

You see that by checking the `__class__` attribute. 

Everything, and I mean everything, is an object in Python. That includes ints, 
strings, functions and classes. All of them are objects. And all of them have
been created from a class:

    &gt;&gt;&gt; age = 35
    &gt;&gt;&gt; age.__class__
    &lt;type &#39;int&#39;&gt;
    &gt;&gt;&gt; name = &#39;bob&#39;
    &gt;&gt;&gt; name.__class__
    &lt;type &#39;str&#39;&gt;
    &gt;&gt;&gt; def foo(): pass
    &gt;&gt;&gt; foo.__class__
    &lt;type &#39;function&#39;&gt;
    &gt;&gt;&gt; class Bar(object): pass
    &gt;&gt;&gt; b = Bar()
    &gt;&gt;&gt; b.__class__
    &lt;class &#39;__main__.Bar&#39;&gt;

Now, what is the `__class__` of any `__class__` ?

    &gt;&gt;&gt; age.__class__.__class__
    &lt;type &#39;type&#39;&gt;
    &gt;&gt;&gt; name.__class__.__class__
    &lt;type &#39;type&#39;&gt;
    &gt;&gt;&gt; foo.__class__.__class__
    &lt;type &#39;type&#39;&gt;
    &gt;&gt;&gt; b.__class__.__class__
    &lt;type &#39;type&#39;&gt;

So, a metaclass is just the stuff that creates class objects.

You can call it a &#39;class factory&#39; if you wish.

`type` is the built-in metaclass Python uses, but of course, you can create your
own metaclass.

The [`__metaclass__`][2] attribute
==================================

You can add a `__metaclass__` attribute when you write a class:

    class Foo(object):
      __metaclass__ = something...
      [...]

If you do so, Python will use the metaclass to create the class `Foo`.

Careful, it&#39;s tricky.

You write `class Foo(object)` first, but the class object `Foo` is not created
in memory yet.

Python will look for `__metaclass__` in the class definition. If it finds it,
it will use it to create the object class `Foo`. If it doesn&#39;t, it will use
`type` to create the class.

Read that several times.

When you do:

    class Foo(Bar):
      pass

Python does the following:

Is there a `__metaclass__` attribute in `Foo`?

If yes, create in memory a class object (I said a class object, stay with me here), with the name `Foo` by using what is in `__metaclass__`.

If Python can&#39;t find `__metaclass__`, it will look for a `__metaclass__` at the MODULE level, and try to do the same (but only for classes that don&#39;t inherit anything, basically old-style classes). 

Then if it can&#39;t find any `__metaclass__` at all, it will use the `Bar`&#39;s (the first parent) own metaclass (which might be the default `type`) to create the class object.

Be careful here that the `__metaclass__` attribute will not be inherited, the metaclass of the parent (`Bar.__class__`) will be. If `Bar` used a `__metaclass__` attribute that created `Bar` with `type()` (and not `type.__new__()`), the subclasses will not inherit that behavior.

Now the big question is, what can you put in `__metaclass__` ?

The answer is: something that can create a class.

And what can create a class? `type`, or anything that subclasses or uses it.

Custom metaclasses
==================

The main purpose of a metaclass is to change the class automatically,
when it&#39;s created.

You usually do this for APIs, where you want to create classes matching the
current context.

Imagine a stupid example, where you decide that all classes in your module
should have their attributes written in uppercase. There are several ways to 
do this, but one way is to set `__metaclass__` at the module level.

This way, all classes of this module will be created using this metaclass, 
and we just have to tell the metaclass to turn all attributes to uppercase.

Luckily, `__metaclass__` can actually be any callable, it doesn&#39;t need to be a
formal class (I know, something with &#39;class&#39; in its name doesn&#39;t need to be 
a class, go figure... but it&#39;s helpful).

So we will start with a simple example, by using a function.

    # the metaclass will automatically get passed the same argument
    # that you usually pass to `type`
    def upper_attr(future_class_name, future_class_parents, future_class_attr):
      &quot;&quot;&quot;
        Return a class object, with the list of its attribute turned 
        into uppercase.
      &quot;&quot;&quot;
    
      # pick up any attribute that doesn&#39;t start with &#39;__&#39; and uppercase it
      uppercase_attr = {}
      for name, val in future_class_attr.items():
          if not name.startswith(&#39;__&#39;):
              uppercase_attr[name.upper()] = val
          else:
              uppercase_attr[name] = val

      # let `type` do the class creation
      return type(future_class_name, future_class_parents, uppercase_attr)
    
    __metaclass__ = upper_attr # this will affect all classes in the module
    
    class Foo(): # global __metaclass__ won&#39;t work with &quot;object&quot; though
      # but we can define __metaclass__ here instead to affect only this class
      # and this will work with &quot;object&quot; children
      bar = &#39;bip&#39;
    
    print(hasattr(Foo, &#39;bar&#39;))
    # Out: False
    print(hasattr(Foo, &#39;BAR&#39;))
    # Out: True
    
    f = Foo()
    print(f.BAR)
    # Out: &#39;bip&#39;

Now, let&#39;s do exactly the same, but using a real class for a metaclass:

    # remember that `type` is actually a class like `str` and `int`
    # so you can inherit from it
    class UpperAttrMetaclass(type): 
        # __new__ is the method called before __init__
        # it&#39;s the method that creates the object and returns it
        # while __init__ just initializes the object passed as parameter
        # you rarely use __new__, except when you want to control how the object
        # is created.
        # here the created object is the class, and we want to customize it
        # so we override __new__
        # you can do some stuff in __init__ too if you wish
        # some advanced use involves overriding __call__ as well, but we won&#39;t
        # see this
        def __new__(upperattr_metaclass, future_class_name, 
                    future_class_parents, future_class_attr):
    
            uppercase_attr = {}
            for name, val in future_class_attr.items():
                if not name.startswith(&#39;__&#39;):
                    uppercase_attr[name.upper()] = val
                else:
                    uppercase_attr[name] = val
    
            return type(future_class_name, future_class_parents, uppercase_attr)


But this is not really OOP. We call `type` directly and we don&#39;t override
or call the parent `__new__`. Let&#39;s do it:

    class UpperAttrMetaclass(type): 
    
        def __new__(upperattr_metaclass, future_class_name, 
                    future_class_parents, future_class_attr):
    
            uppercase_attr = {}
            for name, val in future_class_attr.items():
                if not name.startswith(&#39;__&#39;):
                    uppercase_attr[name.upper()] = val
                else:
                    uppercase_attr[name] = val
    
            # reuse the type.__new__ method
            # this is basic OOP, nothing magic in there
            return type.__new__(upperattr_metaclass, future_class_name, 
                                future_class_parents, uppercase_attr)

You may have noticed the extra argument `upperattr_metaclass`. There is
nothing special about it: `__new__` always receives the class it&#39;s defined in, as first parameter. Just like you have `self` for ordinary methods which receive the instance as first parameter, or the defining class for class methods.

Of course, the names I used here are long for the sake of clarity, but like
for `self`, all the arguments have conventional names. So a real production
metaclass would look like this:

    class UpperAttrMetaclass(type): 
    
        def __new__(cls, clsname, bases, dct):
    
            uppercase_attr = {}
            for name, val in dct.items():
                if not name.startswith(&#39;__&#39;):
                    uppercase_attr[name.upper()] = val
                else:
                    uppercase_attr[name] = val
    
            return type.__new__(cls, clsname, bases, uppercase_attr)

We can make it even cleaner by using `super`, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):

    class UpperAttrMetaclass(type): 
    
        def __new__(cls, clsname, bases, dct):
    
            uppercase_attr = {}
            for name, val in dct.items():
                if not name.startswith(&#39;__&#39;):
                    uppercase_attr[name.upper()] = val
                else:
                    uppercase_attr[name] = val
    
            return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)

That&#39;s it. There is really nothing more about metaclasses.

The reason behind the complexity of the code using metaclasses is not because
of metaclasses, it&#39;s because you usually use metaclasses to do twisted stuff
relying on introspection, manipulating inheritance, vars such as `__dict__`, etc.

Indeed, metaclasses are especially useful to do black magic, and therefore
complicated stuff. But by themselves, they are simple:

- intercept a class creation
- modify the class
- return the modified class


Why would you use metaclasses classes instead of functions?
=============================================================

Since `__metaclass__` can accept any callable, why would you use a class
since it&#39;s obviously more complicated?

There are several reasons to do so:

- The intention is clear. When you read `UpperAttrMetaclass(type)`, you know
  what&#39;s going to follow
- You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.
- You can structure your code better. You never use metaclasses for something as
  trivial as the above example. It&#39;s usually for something complicated. Having the
  ability to make several methods and group them in one class is very useful
  to make the code easier to read.
- You can hook on `__new__`, `__init__` and `__call__`. Which will allow
  you to do different stuff. Even if usually you can do it all in `__new__`, 
  some people are just more comfortable using `__init__`.
- These are called metaclasses, damn it! It must mean something!


Why would you use metaclasses?
========================================

Now the big question. Why would you use some obscure error prone feature?

Well, usually you don&#39;t:

&gt; Metaclasses are deeper magic that
&gt; 99% of users should never worry about.
&gt; If you wonder whether you need them,
&gt; you don&#39;t (the people who actually
&gt; need them know with certainty that
&gt; they need them, and don&#39;t need an
&gt; explanation about why). 

  *Python Guru Tim Peters*

The main use case for a metaclass is creating an API. A typical example of this is the Django ORM.

It allows you to define something like this:

    class Person(models.Model):
      name = models.CharField(max_length=30)
      age = models.IntegerField()

But if you do this:

    guy = Person(name=&#39;bob&#39;, age=&#39;35&#39;)
    print(guy.age)

It won&#39;t return an `IntegerField` object. It will return an `int`, and can even take it directly from the database.

This is possible because `models.Model` defines `__metaclass__` and 
it uses some magic that will turn the `Person` you just defined with simple statements
into a complex hook to a database field. 

Django makes something complex look simple by exposing a simple API
and using metaclasses, recreating code from this API to do the real job
behind the scenes.

The last word
====================

First, you know that classes are objects that can create instances.

Well in fact, classes are themselves instances. Of metaclasses.

    &gt;&gt;&gt; class Foo(object): pass
    &gt;&gt;&gt; id(Foo)
    142630324

Everything is an object in Python, and they are all either instances of classes
or instances of metaclasses.

Except for `type`.

`type` is actually its own metaclass. This is not something you could
reproduce in pure Python, and is done by cheating a little bit at the implementation
level.

Secondly, metaclasses are complicated. You may not want to use them for 
very simple class alterations. You can change classes by using two different techniques:

- [monkey patching](http://en.wikipedia.org/wiki/Monkey_patch)
- class decorators

99% of the time you need class alteration, you are better off using these.

But 99% of the time, you don&#39;t need class alteration at all.


  [1]: http://docs.python.org/2/library/functions.html#type
  [2]: http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__