I see two answers with good qualities, each with a small flaw, so I will give my take on it:

Try [`os.path.exists`][1], and consider [`os.makedirs`][2] for the creation.

    if not os.path.exists(directory):
        os.makedirs(directory)

As noted in comments and elsewhere, there&#39;s a race condition - if the directory is created between the `os.path.exists` and the `os.makedirs` calls, the `os.makedirs` will fail with an `OSError`. Unfortunately, blanket-catching `OSError` and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.

One option would be to trap the `OSError` and examine the embedded error code, if one knew what&#39;s what (on my OS, 13 seems to indicate that permission is denied, and 17 that the file exists - it&#39;s not clear that that&#39;s even remotely portable, but is explored in [Is there a cross-platform way of getting information from Pythonâ€™s OSError][3]). Alternatively, there could be a second `os.path.exists`, but suppose another created the directory after the first check, then removed it before the second one - we could still be fooled. 

Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.


[1]: https://docs.python.org/2/library/os.path.html#os.path.exists
[2]: https://docs.python.org/2/library/os.html#os.makedirs
[3]: http://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror